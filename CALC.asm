STA SEGMENT STACK
	DW 20 DUP(?)
STA ENDS
DATA SEGMENT
	LINE DB 83 DUP(?)
	NUMBERS DW 39 DUP(0)
	INDEX_NUM DW 0
	OPERATORS DB 39 DUP(?)
	INDEX_OPER DW 0
	RESULT DB 10 DUP(0)
	INDEX_RES DW 0
	MSG1 DB 'ENTER A LINE OF MATHEMATIC EQUATION',10,'$'
	MSG2 DB 'RESULT: $'
	DIGIT DB ?
	NUM_BOOL DB ?
	OPER_BOOL DB ?
	IS_ADD_BOOL DB ?
	IS_CALC DB ?
	COUNT_OPERATOR DW ?
	INDEX_BRACET_1 DW ?
	INDEX_BRACET_2 DW ?
DATA ENDS
CODE SEGMENT
	ASSUME CS:CODE,DS:DATA,SS:STA
MAIN:
	MOV AX,DATA
	MOV DS,AX
	MOV DX,OFFSET MSG1
	CALL PRINT
	CALL SCAN
	CALL SPLIT_NUM
	CALL SPLIT_OPER
	CALL CALCULATE
	CALL INIT_RESULT
	MOV DX,OFFSET MSG2
	CALL PRINT
	CALL PRINT_RESULT
	MOV AH,4CH
	INT 21H
SCAN PROC
	MOV SI,OFFSET LINE
	INC SI
	MOV AH,1
	RUN:
	INT 21H
	CMP AL,13
	JE FIN1
	MOV [SI],AL
	INC SI
	JMP RUN
	FIN1:
	MOV AL,')'
	MOV [SI],AL
	MOV AL,'$'
	MOV [SI+1],AL
	MOV AL,'('
	MOV SI,OFFSET LINE
	MOV [SI],AL
	RET
SCAN ENDP
PRINT PROC
	MOV AH,9
	INT 21H
	RET
PRINT ENDP
IS_NUM PROC
	MOV CH,DIGIT
	CMP CH,'9'
	JG N_NUMBER
	CMP CH,'0'
	JL N_NUMBER
	MOV CL,1
	JMP FIN2
	N_NUMBER:
	MOV CL,0
	FIN2:
	MOV NUM_BOOL,CL
	RET
IS_NUM ENDP
IS_OPER PROC
	MOV CH,DIGIT
	MOV CL,1
	CMP CH,'*'
	JE FIN3
	CMP CH,'/'
	JE FIN3
	CMP CH,'+'
	JE FIN3
	CMP CH,'-'
	JE FIN3
	MOV CL,0
	FIN3:
	MOV OPER_BOOL,CL
	RET
IS_OPER ENDP
SPLIT_NUM PROC
	MOV IS_ADD_BOOL,1
	MOV AX,0
	MOV SI,OFFSET NUMBERS
	MOV DI,OFFSET LINE
	INC DI
	RUN2:
	MOV BL,[DI]
	MOV DIGIT,BL
	CALL IS_NUM
	MOV BH,NUM_BOOL
	CMP BH,1
	JNE ZERO
	MOV IS_ADD_BOOL,0
	MOV CX,10
	MOV BH,0
	SUB BL,48
	MUL CX
	ADD AX,BX
	JMP NEXT
	ZERO:
	CMP IS_ADD_BOOL,1
	JE NEXT2
	MOV [SI],AX
	ADD SI,2
	MOV IS_ADD_BOOL,1
	NEXT2:
	MOV AX,0
	NEXT:
	INC DI
	CMP BL,'$'
	JNE RUN2
	MOV INDEX_NUM,SI
	RET	
SPLIT_NUM ENDP
SPLIT_OPER PROC
	MOV SI,OFFSET LINE
	MOV DI,OFFSET OPERATORS
	RUN3:
	MOV AL,[SI]
	MOV DIGIT,AL
	CALL IS_OPER
	CMP OPER_BOOL,1
	JNE NEXT3
	MOV [DI],AL
	INC DI
	NEXT3:
	INC SI
	CMP AL,'$'
	JNE RUN3
	MOV INDEX_OPER,DI
	RET
SPLIT_OPER ENDP
CALC_MUL_DIV PROC
	MOV IS_CALC,0
	CMP DIGIT,'*'
	JNE CHECK_DIV
	MUL BX
	MOV IS_CALC,1
	JMP FIN4
	CHECK_DIV:
	CMP DIGIT,'/'
	JNE FIN4
	MOV DX,0
	DIV BX
	MOV IS_CALC,1
	FIN4:
	RET
CALC_MUL_DIV ENDP
CALC_ADD_SUB PROC
	MOV IS_CALC,0
	CMP DIGIT,'+'
	JNE CHECK_SUB
	ADD AX,BX
	MOV IS_CALC,1
	JMP FIN5
	CHECK_SUB:
	CMP DIGIT,'-'
	JNE FIN5
	SUB AX,BX
	MOV IS_CALC,1
	FIN5:
	RET
CALC_ADD_SUB ENDP
COUNT_OPER PROC
	MOV DI,OFFSET LINE
	MOV DX,0
	RUN4:
	MOV AL,[DI]
	MOV DIGIT,AL
	CALL IS_OPER
	CMP OPER_BOOL,1
	JNE NEXT4
	INC DX
	NEXT4:
	INC DI
	CMP DI,SI
	JNG RUN4
	MOV COUNT_OPERATOR,DX
	RET
COUNT_OPER ENDP
INIT_NUMS PROC
	CALL COUNT_OPER
	MOV AX,COUNT_OPERATOR
	DEC AX
	MOV BX,2
	MUL BX
	MOV DI,OFFSET NUMBERS
	ADD DI,AX
	MOV AX,[DI]
	MOV BX,[DI+2]
	RET
INIT_NUMS ENDP
SHIFT PROC
	MOV DI,OFFSET NUMBERS
	MOV AX,COUNT_OPERATOR
	MOV BX,2
	MUL BX
	ADD DI,AX
	RUN5:
	MOV AX,[DI+2]
	MOV [DI],AX
	ADD DI,2
	CMP DI,INDEX_NUM
	JNE RUN5
	SUB INDEX_NUM,2
	MOV DI,OFFSET OPERATORS
	MOV AX,COUNT_OPERATOR
	DEC AX
	ADD DI,AX
	RUN6:
	MOV AL,[DI+1]
	MOV [DI],AL
	INC DI
	CMP DI,INDEX_OPER
	JNE RUN6
	DEC INDEX_OPER
	RET
SHIFT ENDP
INIT_BRACETS PROC
	MOV DI,OFFSET LINE
	RUN7:
	MOV AL,[DI]
	CMP AL,')'
	JE NEXT5
	INC DI
	JMP RUN7
	NEXT5:
	MOV INDEX_BRACET_2,DI
	RUN8:
	MOV AL,[DI]
	CMP AL,'('
	JE NEXT6
	DEC DI
	JMP RUN8
	NEXT6:
	MOV INDEX_BRACET_1,DI
	RET
INIT_BRACETS ENDP
CALC_PART1 PROC
	CALL INIT_BRACETS
	MOV SI,INDEX_BRACET_1
	INC SI
	RUN9:
	MOV AL,[SI]
	MOV DIGIT,AL
	CALL IS_OPER
	CMP OPER_BOOL,1
	JNE NEXT7
	CALL INIT_NUMS
	CALL CALC_MUL_DIV
	CMP IS_CALC,1
	JNE NEXT7
	MOV [DI],AX
	MOV AL,' '
	MOV [SI],AL
	CALL SHIFT
	NEXT7:
	INC SI
	CMP SI,INDEX_BRACET_2
	JNE RUN9
	MOV SI,INDEX_BRACET_1
	INC SI
	RUN10:
	MOV AL,[SI]
	MOV DIGIT,AL
	CALL IS_OPER
	CMP OPER_BOOL,1
	JNE NEXT8
	CALL INIT_NUMS
	CALL CALC_ADD_SUB
	CMP IS_CALC,1
	JNE NEXT8
	MOV [DI],AX
	MOV AL,' '
	MOV [SI],AL
	CALL SHIFT
	NEXT8:
	INC SI
	CMP SI,INDEX_BRACET_2
	JNE RUN10
	MOV AL,' '
	MOV [SI],AL
	MOV SI,INDEX_BRACET_1
	MOV [SI],AL
	RET	
CALC_PART1 ENDP
CALCULATE PROC
	RUN11:
	CALL CALC_PART1
	MOV SI,INDEX_OPER
	SUB SI,OFFSET OPERATORS
	CMP SI,0
	JG RUN11
	RET
CALCULATE ENDP
INIT_RESULT PROC
	MOV SI,OFFSET NUMBERS
	MOV AX,[SI]
	MOV DI,OFFSET RESULT
	MOV BX,10
	RUN12:
	MOV DX,0
	DIV BX
	MOV [DI],DL
	INC DI
	CMP AX,0
	JNE RUN12
	MOV INDEX_RES,DI
	RET
INIT_RESULT ENDP
PRINT_RESULT PROC
	MOV SI,INDEX_RES
	MOV DI,OFFSET RESULT
	DEC SI
	RUN13:
	MOV DL,[SI]
	ADD DL,48
	MOV AH,2
	INT 21H
	DEC SI
	CMP SI,DI
	JNL RUN13
	RET
PRINT_RESULT ENDP
CODE ENDS
END MAIN